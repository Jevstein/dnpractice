/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef YiService_H
#define YiService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "YiService_types.h"

namespace yisrv {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class YiServiceIf {
 public:
  virtual ~YiServiceIf() {}
  virtual int32_t GetServerName() = 0;
  virtual int32_t GetServerTime() = 0;
};

class YiServiceIfFactory {
 public:
  typedef YiServiceIf Handler;

  virtual ~YiServiceIfFactory() {}

  virtual YiServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(YiServiceIf* /* handler */) = 0;
};

class YiServiceIfSingletonFactory : virtual public YiServiceIfFactory {
 public:
  YiServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<YiServiceIf>& iface) : iface_(iface) {}
  virtual ~YiServiceIfSingletonFactory() {}

  virtual YiServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(YiServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<YiServiceIf> iface_;
};

class YiServiceNull : virtual public YiServiceIf {
 public:
  virtual ~YiServiceNull() {}
  int32_t GetServerName() {
    int32_t _return = 0;
    return _return;
  }
  int32_t GetServerTime() {
    int32_t _return = 0;
    return _return;
  }
};


class YiService_GetServerName_args {
 public:

  YiService_GetServerName_args(const YiService_GetServerName_args&);
  YiService_GetServerName_args& operator=(const YiService_GetServerName_args&);
  YiService_GetServerName_args() {
  }

  virtual ~YiService_GetServerName_args() throw();

  bool operator == (const YiService_GetServerName_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const YiService_GetServerName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const YiService_GetServerName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class YiService_GetServerName_pargs {
 public:


  virtual ~YiService_GetServerName_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _YiService_GetServerName_result__isset {
  _YiService_GetServerName_result__isset() : success(false) {}
  bool success :1;
} _YiService_GetServerName_result__isset;

class YiService_GetServerName_result {
 public:

  YiService_GetServerName_result(const YiService_GetServerName_result&);
  YiService_GetServerName_result& operator=(const YiService_GetServerName_result&);
  YiService_GetServerName_result() : success(0) {
  }

  virtual ~YiService_GetServerName_result() throw();
  int32_t success;

  _YiService_GetServerName_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const YiService_GetServerName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const YiService_GetServerName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const YiService_GetServerName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _YiService_GetServerName_presult__isset {
  _YiService_GetServerName_presult__isset() : success(false) {}
  bool success :1;
} _YiService_GetServerName_presult__isset;

class YiService_GetServerName_presult {
 public:


  virtual ~YiService_GetServerName_presult() throw();
  int32_t* success;

  _YiService_GetServerName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class YiService_GetServerTime_args {
 public:

  YiService_GetServerTime_args(const YiService_GetServerTime_args&);
  YiService_GetServerTime_args& operator=(const YiService_GetServerTime_args&);
  YiService_GetServerTime_args() {
  }

  virtual ~YiService_GetServerTime_args() throw();

  bool operator == (const YiService_GetServerTime_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const YiService_GetServerTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const YiService_GetServerTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class YiService_GetServerTime_pargs {
 public:


  virtual ~YiService_GetServerTime_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _YiService_GetServerTime_result__isset {
  _YiService_GetServerTime_result__isset() : success(false) {}
  bool success :1;
} _YiService_GetServerTime_result__isset;

class YiService_GetServerTime_result {
 public:

  YiService_GetServerTime_result(const YiService_GetServerTime_result&);
  YiService_GetServerTime_result& operator=(const YiService_GetServerTime_result&);
  YiService_GetServerTime_result() : success(0) {
  }

  virtual ~YiService_GetServerTime_result() throw();
  int32_t success;

  _YiService_GetServerTime_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const YiService_GetServerTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const YiService_GetServerTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const YiService_GetServerTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _YiService_GetServerTime_presult__isset {
  _YiService_GetServerTime_presult__isset() : success(false) {}
  bool success :1;
} _YiService_GetServerTime_presult__isset;

class YiService_GetServerTime_presult {
 public:


  virtual ~YiService_GetServerTime_presult() throw();
  int32_t* success;

  _YiService_GetServerTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class YiServiceClient : virtual public YiServiceIf {
 public:
  YiServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  YiServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t GetServerName();
  void send_GetServerName();
  int32_t recv_GetServerName();
  int32_t GetServerTime();
  void send_GetServerTime();
  int32_t recv_GetServerTime();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class YiServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<YiServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (YiServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetServerName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetServerTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  YiServiceProcessor(::apache::thrift::stdcxx::shared_ptr<YiServiceIf> iface) :
    iface_(iface) {
    processMap_["GetServerName"] = &YiServiceProcessor::process_GetServerName;
    processMap_["GetServerTime"] = &YiServiceProcessor::process_GetServerTime;
  }

  virtual ~YiServiceProcessor() {}
};

class YiServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  YiServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< YiServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< YiServiceIfFactory > handlerFactory_;
};

class YiServiceMultiface : virtual public YiServiceIf {
 public:
  YiServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<YiServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~YiServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<YiServiceIf> > ifaces_;
  YiServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<YiServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t GetServerName() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetServerName();
    }
    return ifaces_[i]->GetServerName();
  }

  int32_t GetServerTime() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetServerTime();
    }
    return ifaces_[i]->GetServerTime();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class YiServiceConcurrentClient : virtual public YiServiceIf {
 public:
  YiServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  YiServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t GetServerName();
  int32_t send_GetServerName();
  int32_t recv_GetServerName(const int32_t seqid);
  int32_t GetServerTime();
  int32_t send_GetServerTime();
  int32_t recv_GetServerTime(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
